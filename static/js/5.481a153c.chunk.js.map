{"version":3,"sources":["component/AuthForm/AuthForm.module.scss","views/AuthPageView/AuthPageView.module.scss","redux/auth/auth-operations.js","component/AuthForm/index.js","views/AuthPageView/AuthPageView.js"],"names":["module","exports","axios","defaults","baseURL","token","headers","common","Authorization","operations","register","credentials","dispatch","a","authActions","post","responce","data","message","logIn","AuthForm","useDispatch","useState","email","setEmail","password","setPassword","handleChange","target","name","value","className","styles","form","autoComplete","text","buttonGoogleWrapper","buttonGoogle","type","placeholder","input","onChange","buttonWrapper","buttonSignIn","onClick","e","preventDefault","authOperations","buttonSignUp","AuthPageView","section","wrapper","title","textBold"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,KAAO,uBAAuB,oBAAsB,sCAAsC,aAAe,+BAA+B,MAAQ,wBAAwB,cAAgB,gCAAgC,aAAe,+BAA+B,aAAe,iC,oBCArUD,EAAOC,QAAU,CAAC,QAAU,8BAA8B,QAAU,8BAA8B,MAAQ,4BAA4B,KAAO,2BAA2B,SAAW,iC,qHCEnLC,IAAMC,SAASC,QAAU,6CAEzB,IAAMC,EAAQ,SACRA,GACFH,IAAMC,SAASG,QAAQC,OAAOC,cAA9B,iBAAwDH,IA2D3CI,EAJE,CACfC,SA3Ca,SAAAC,GAAW,8CAAI,WAAMC,GAAN,eAAAC,EAAA,6DAC9BD,EAASE,OADqB,kBAILZ,IAAMa,KAAK,iBAAkBJ,GAJxB,OAItBK,EAJsB,OAO5BX,EAAUW,EAASC,KAAKZ,OAKxBO,EAASE,IAA4BE,EAASC,OAZlB,gDAiB5BL,EAASE,IAA0B,KAAMI,UAjBb,yDAAJ,uDA4CxBC,MAjBU,SAAAR,GAAW,8CAAI,WAAMC,GAAN,eAAAC,EAAA,6DAC3BD,EAASE,OADkB,kBAIFZ,IAAMa,KAAK,eAAgBJ,GAJzB,OAInBK,EAJmB,OAMzBX,EAAUW,EAASC,KAAKZ,OAGxBO,EAASE,IAAyBE,EAASC,OATlB,gDAWzBL,EAASE,IAAuB,KAAMI,UAXb,yDAAJ,wD,yBC1CV,SAASE,IACtB,IAAMR,EAAWS,cADgB,EAEPC,mBAAS,IAFF,mBAE1BC,EAF0B,KAEnBC,EAFmB,OAGDF,mBAAS,IAHR,mBAG1BG,EAH0B,KAGhBC,EAHgB,KAK3BC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOL,EAASM,GAClB,IAAK,WACH,OAAOJ,EAAYI,GACrB,QACE,SAoBN,OACE,uBAAMC,UAAWC,IAAOC,KAAMC,aAAa,MAA3C,UACE,oBAAIH,UAAWC,IAAOG,KAAtB,2DAGA,qBAAKJ,UAAWC,IAAOI,oBAAvB,SACE,wBAAQL,UAAWC,IAAOK,aAA1B,sBAEF,oBAAIN,UAAWC,IAAOG,KAAtB,2DAGA,uBACEG,KAAK,QACLT,KAAK,QACLU,YAAY,SACZT,MAAOP,EACPQ,UAAWC,IAAOQ,MAClBC,SAAUd,IAEZ,uBACEW,KAAK,WACLT,KAAK,WACLU,YAAY,WACZT,MAAOL,EACPM,UAAWC,IAAOQ,MAClBC,SAAUd,IAEZ,sBAAKI,UAAWC,IAAOU,cAAvB,UACE,wBAAQX,UAAWC,IAAOW,aAAcC,QA3CrB,SAAAC,GACvBA,EAAEC,iBACFlC,EAASmC,EAAe5B,MAAM,CAAEI,QAAOE,cACvCD,EAAS,IACTE,EAAY,KAuCR,qBACA,wBAAQK,UAAWC,IAAOgB,aAAcJ,QApClB,SAAAC,GAC1BA,EAAEC,iBACFlC,EAASmC,EAAerC,SAAS,CAAEa,QAAOE,cAC1CD,EAAS,IACTE,EAAY,KAgCR,2B,sBCxCOuB,UAtBM,WACnB,OACE,0BAASlB,UAAWC,IAAOkB,QAA3B,UACE,sBAAKnB,UAAWC,IAAOmB,QAAvB,UACE,oBAAIpB,UAAWC,IAAOoB,MAAtB,sBACA,oBAAGrB,UAAWC,IAAOG,KAArB,UACE,sBAAMJ,UAAWC,IAAOqB,SAAxB,eADF,qCAGE,uBAHF,+FAIiC,IAC/B,sBAAMtB,UAAWC,IAAOqB,SAAxB,yBALF,2DAM0C,IACxC,sBAAMtB,UAAWC,IAAOqB,SAAxB,qBAGJ,qBAAKtB,UAAWC,IAAOmB,QAAvB,SACE,cAAC/B,EAAD","file":"static/js/5.481a153c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AuthForm_form__KcinH\",\"text\":\"AuthForm_text__3teb-\",\"buttonGoogleWrapper\":\"AuthForm_buttonGoogleWrapper__21G6u\",\"buttonGoogle\":\"AuthForm_buttonGoogle__1Sq9E\",\"input\":\"AuthForm_input__3bDTW\",\"buttonWrapper\":\"AuthForm_buttonWrapper__3qbja\",\"buttonSignIn\":\"AuthForm_buttonSignIn__1n5TN\",\"buttonSignUp\":\"AuthForm_buttonSignUp__1M-EL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"AuthPageView_section__3AZgF\",\"wrapper\":\"AuthPageView_wrapper__2XSxD\",\"title\":\"AuthPageView_title__MJNFX\",\"text\":\"AuthPageView_text__2eHBL\",\"textBold\":\"AuthPageView_textBold__3kHfq\"};","import axios from 'axios';\nimport * as authActions from './auth-actions';\n\naxios.defaults.baseURL = 'https://intense-stream-90411.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n/*\n * POST @ /auth/register\n * body: { email, password }\n * После успешной регистрации добавляем токен в HTTP-заголовок\n * credentials - это данные пользователя (форма передаёт)\n */\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const responce = await axios.post('/auth/register', credentials);\n    // сетим токен на заголовок авторизации(на дефолтное свойство axios (axios.defaults.headers.common.Authorization))\n    // чтоб все последующие запросы шли с этим заголовком авторизации\n    token.set(responce.data.token);\n\n    //??????????????????????????????????????????????\n    // прокидывает responce.data до редюсера. В responce.data лежит обьект со свойствами user и token.\n    //  В payload будет свойство user и свойство token\n    dispatch(authActions.registerSuccess(responce.data));\n  //??????????????????????????????????????????????\n\n\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\n/*\n * POST @ /users/login\n * body: { email, password }\n * После успешного логина добавляем токен в HTTP-заголовок\n */\n// credentials - это данные пользователя, форма передаёт\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const responce = await axios.post('/users/login', credentials);\n    // аналогично как и в register\n    token.set(responce.data.token);\n    // прокидывает responce.data до редюсера. В responce.data лежит обьект со свойствами user и token.\n    //  В payload будет свойство user и свойство token\n    dispatch(authActions.loginSuccess(responce.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst operations = {\n    register,\n    logIn,\n  };\n  export default operations;","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport authOperations from '../../redux/auth/auth-operations'\nimport styles from './AuthForm.module.scss';\n\nexport default function AuthForm() {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  // Sign In (Войти)\n  const handleClickLogIn = e => {\n    e.preventDefault();\n    dispatch(authOperations.logIn({ email, password }));\n    setEmail('');\n    setPassword('');\n  };\n\n    // Sign Up (Регистрация)\n  const handleClickRegister = e => {\n    e.preventDefault();\n    dispatch(authOperations.register({ email, password }));\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <form className={styles.form} autoComplete=\"off\">\n      <h2 className={styles.text}>\n        You can use your Google Account to authorize:\n      </h2>\n      <div className={styles.buttonGoogleWrapper}>\n        <button className={styles.buttonGoogle}>Google</button>\n      </div>\n      <h2 className={styles.text}>\n        Or login to our app using e-mail and password\n      </h2>\n      <input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"E-mail\"\n        value={email}\n        className={styles.input}\n        onChange={handleChange}\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        className={styles.input}\n        onChange={handleChange}\n      />\n      <div className={styles.buttonWrapper}>\n        <button className={styles.buttonSignIn} onClick={handleClickLogIn}>Sign in</button>\n        <button className={styles.buttonSignUp} onClick={handleClickRegister}>Sign up</button>\n      </div>\n    </form>\n  );\n}\n","import AuthForm from '../../component/AuthForm/index';\n\nimport styles from './AuthPageView.module.scss';\n\nconst AuthPageView = () => {\n  return (\n    <section className={styles.section}>\n      <div className={styles.wrapper}>\n        <h2 className={styles.title}>Pro Test</h2>\n        <p className={styles.text}>\n          <span className={styles.textBold}>[</span> We will help you find weak\n          points\n          <br /> in knowledge so that you can strengthen it. We will show you\n          what is relevant to know for a{' '}\n          <span className={styles.textBold}>QA Engineer</span> and will try to\n          make the learning process more diverse_{' '}\n          <span className={styles.textBold}>]</span>\n        </p>\n      </div>\n      <div className={styles.wrapper}>\n        <AuthForm />\n      </div>\n    </section>\n  );\n};\n\nexport default AuthPageView;\n"],"sourceRoot":""}