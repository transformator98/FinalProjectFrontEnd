{"version":3,"sources":["component/TestPage/TestPage.module.scss","component/TestPage/TestPage.js","views/TestPageView.js"],"names":["module","exports","TestPage","useState","tests","setTests","index","setIndex","value","setValue","dispatch","useDispatch","a","axios","get","data","console","log","error","useEffect","getTests","then","moveNext","length","prevState","className","s","testsSection","testCard","questionNumber","questionNumber_currentQuestion","question","Group","onChange","e","target","answers","map","anwersItem","btnWrapper","nextBtn_disabled","disabled","nextBtn_active","onClick","actions","addResult","TestPageView","defaults","baseURL"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,aAAe,+BAA+B,SAAW,2BAA2B,eAAiB,iCAAiC,+BAAiC,iDAAiD,SAAW,2BAA2B,WAAa,6BAA6B,WAAa,6BAA6B,eAAiB,iCAAiC,iBAAmB,qC,8LCe1Z,SAASC,IAAY,IAAD,EACPC,mBAAS,MADF,mBAC1BC,EAD0B,KACnBC,EADmB,OAEPF,mBAAS,GAFF,mBAE1BG,EAF0B,KAEnBC,EAFmB,OAGPJ,mBAAS,MAHF,mBAG1BK,EAH0B,KAGnBC,EAHmB,KAM3BC,EAAWC,cANgB,4CAkBjC,8BAAAC,EAAA,+EAE2BC,IAAMC,IAAI,sBAFrC,uBAEYC,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,uCAKIC,QAAQC,IAAI,QAAS,CAAEC,MAAK,OALhC,kBAMW,IANX,0DAlBiC,sBA2BjCC,qBAAU,YA3BuB,2CA4B/BC,GAAWC,MAAK,SAAAjB,GAAK,OAAIC,EAASD,EAAMW,KAAKX,YAC5C,IAEH,IAIMkB,EAAW,WACXhB,IAAUF,EAAMmB,OAAS,IAG7Bd,EAAS,MACTF,GAAS,SAAAiB,GAAS,OAAIA,EAAY,OASpC,OACE,mCACGpB,GACC,0BAASqB,UAAWC,IAAEC,aAAtB,UACE,sBAAKF,UAAWC,IAAEE,SAAlB,UACE,oBAAGH,UAAWC,IAAEG,eAAhB,qBACW,IACT,sBAAMJ,UAAWC,IAAEI,+BAAnB,mBACExB,EAAQ,KACC,IAJb,UAOA,oBAAImB,UAAWC,IAAEK,SAAjB,SAA4B3B,EAAME,GAAOyB,WACzC,cAAC,IAAMC,MAAP,CAAaC,SA/BF,SAAAC,GACnBlB,QAAQC,IAAIiB,EAAEC,OAAO3B,OACrBC,EAASyB,EAAEC,OAAO3B,QA6B2BA,MAAOA,EAA5C,SACGJ,EAAME,GAAO8B,QAAQC,KAAI,SAAAN,GAAQ,OAChC,mCACE,cAAC,IAAD,CAAOvB,MAAOuB,EAAUN,UAAWC,IAAEY,WAArC,SACGP,cAMX,sBAAKN,UAAWC,IAAEa,WAAlB,UACa,IAAVjC,EACC,wBAAQmB,UAAWC,IAAEc,iBAAkBC,UAAQ,EAA/C,+BAIA,wBAAQhB,UAAWC,IAAEgB,eAAgBC,QApChC,YACA,IAAXrC,GAGJC,GAAS,SAAAiB,GAAS,OAAIA,EAAY,MAgCxB,+BAIAhB,EAIY,KAAVF,EACF,wBACEmB,UAAWC,IAAEgB,eADf,yBAQA,wBACEjB,UAAWC,IAAEgB,eAEbC,QArFF,WACVrB,IAHsBZ,EAASkC,IAAQC,UAAU,UAAW,UAoFlD,2BAZA,wBAAQpB,UAAWC,IAAEc,iBAAkBC,UAAQ,EAA/C,mCCjGC,SAASK,IACtB,OACE,mCACE,cAAC5C,EAAD,MDSNW,IAAMkC,SAASC,QAAU","file":"static/js/TestPageView.0fc83fa6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"testsSection\":\"TestPage_testsSection__2JcaK\",\"testCard\":\"TestPage_testCard__15fc1\",\"questionNumber\":\"TestPage_questionNumber__3l3Mi\",\"questionNumber_currentQuestion\":\"TestPage_questionNumber_currentQuestion__29eZu\",\"question\":\"TestPage_question__3XkP0\",\"anwersItem\":\"TestPage_anwersItem__16Kkp\",\"btnWrapper\":\"TestPage_btnWrapper__1aqxL\",\"nextBtn_active\":\"TestPage_nextBtn_active__3dTug\",\"nextBtn_disabled\":\"TestPage_nextBtn_disabled__YzM--\"};","import { useState, useEffect } from 'react';\nimport s from './TestPage.module.scss';\nimport axios from 'axios';\nimport { Radio } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport actions from 'redux/questions/questions-actions';\n// import 'antd/dist/antd.css';\n// import Radio from '@material-ui/core/Radio';\n// import RadioGroup from '@material-ui/core/RadioGroup';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import FormControl from '@material-ui/core/FormControl';\n// import FormLabel from '@material-ui/core/FormLabel';\n// import { makeStyles } from '@material-ui/core/styles';\n\naxios.defaults.baseURL = 'https://intense-stream-90411.herokuapp.com';\n\nexport default function TestPage() {\n  const [tests, setTests] = useState(null);\n  const [index, setIndex] = useState(0);\n  const [value, setValue] = useState(null);\n  // const [answers, setAnswers] = useState([]);\n\n  const dispatch = useDispatch(); //\n  // нужно передать значение ответа и id вопроса\n  // const addResult = () => dispatch(actions.addResult(value,questionsId));\n\n  //для примера\n  const addResult = () => dispatch(actions.addResult('value-1', 'id-1'));\n  //функция для 2-ч обработчиков по onClick\n  const two = () => {\n    moveNext();\n    addResult();\n  };\n\n  async function getTests() {\n    try {\n      const { data } = await axios.get('/tests/technicalQA');\n      return data;\n    } catch (error) {\n      console.log('error', { error });\n      return [];\n    }\n  }\n  useEffect(() => {\n    getTests().then(tests => setTests(tests.data.tests));\n  }, []);\n\n  const handleChange = e => {\n    console.log(e.target.value);\n    setValue(e.target.value);\n  };\n  const moveNext = () => {\n    if (index === tests.length - 1) {\n      return;\n    }\n    setValue(null);\n    setIndex(prevState => prevState + 1);\n  };\n  const moveBack = () => {\n    if (index === -1) {\n      return;\n    }\n    setIndex(prevState => prevState - 1);\n  };\n\n  return (\n    <>\n      {tests && (\n        <section className={s.testsSection}>\n          <div className={s.testCard}>\n            <p className={s.questionNumber}>\n              Question{' '}\n              <span className={s.questionNumber_currentQuestion}>{`${\n                index + 1\n              }`}</span>{' '}\n              / 12\n            </p>\n            <h2 className={s.question}>{tests[index].question}</h2>\n            <Radio.Group onChange={handleChange} value={value}>\n              {tests[index].answers.map(question => (\n                <>\n                  <Radio value={question} className={s.anwersItem}>\n                    {question}\n                  </Radio>\n                </>\n              ))}\n            </Radio.Group>\n          </div>\n          <div className={s.btnWrapper}>\n            {index === 0 ? (\n              <button className={s.nextBtn_disabled} disabled>\n                Previous question\n              </button>\n            ) : (\n              <button className={s.nextBtn_active} onClick={moveBack}>\n                Previous question\n              </button>\n            )}\n            {!value ? (\n              <button className={s.nextBtn_disabled} disabled>\n                Next question\n              </button>\n            ) : index === 11 ? (\n              <button\n                className={s.nextBtn_active}\n                // onClick={moveNext}\n                // onClick={two}\n              >\n                Finish test\n              </button>\n            ) : (\n              <button\n                className={s.nextBtn_active}\n                // onClick={moveNext}\n                onClick={two}\n              >\n                Next question\n              </button>\n            )}\n          </div>\n        </section>\n      )}\n    </>\n  );\n}\n\n// {\n//   <FormControl component=\"fieldset\">\n//               <FormLabel component=\"legend\">{tests[index].question}</FormLabel>\n//               <RadioGroup\n//                 aria-label={tests[index].question}\n//                 name={tests[index].question}\n//                 value={value}\n//                 onChange={handleChange}\n//               >\n//                 {tests[index].answers.map(question => (\n//                   <FormControlLabel\n//                     className={classes.root}\n//                     value={question}\n//                     control={<Radio />}\n//                     label={question}\n//                   />\n//                 ))}\n//               </RadioGroup>\n//             </FormControl>\n// }\n","import TestPage from 'component/TestPage';\r\n\r\nexport default function TestPageView() {\r\n  return (\r\n    <>\r\n      <TestPage />\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}