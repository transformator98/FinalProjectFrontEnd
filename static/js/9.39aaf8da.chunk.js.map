{"version":3,"sources":["component/AuthForm/AuthForm.module.scss","views/AuthPageView/AuthPageView.module.scss","component/AuthForm/index.js","views/AuthPageView/AuthPageView.js"],"names":["module","exports","AuthForm","dispatch","useDispatch","useState","email","setEmail","password","setPassword","handleChange","target","name","value","className","styles","form","autoComplete","text","buttonGoogleWrapper","buttonGoogle","type","placeholder","input","onChange","buttonWrapper","buttonSignIn","onClick","e","preventDefault","authOperations","logIn","buttonSignUp","register","AuthPageView","section","wrapper","title","textBold"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,KAAO,uBAAuB,oBAAsB,sCAAsC,aAAe,+BAA+B,MAAQ,wBAAwB,cAAgB,gCAAgC,aAAe,+BAA+B,aAAe,iC,oBCArUD,EAAOC,QAAU,CAAC,QAAU,8BAA8B,QAAU,8BAA8B,MAAQ,4BAA4B,KAAO,2BAA2B,SAAW,iC,mGCMpK,SAASC,IACtB,IAAMC,EAAWC,cADgB,EAEPC,mBAAS,IAFF,mBAE1BC,EAF0B,KAEnBC,EAFmB,OAGDF,mBAAS,IAHR,mBAG1BG,EAH0B,KAGhBC,EAHgB,KAK3BC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOL,EAASM,GAClB,IAAK,WACH,OAAOJ,EAAYI,GACrB,QACE,SAoBN,OACE,uBAAMC,UAAWC,IAAOC,KAAMC,aAAa,MAA3C,UACE,oBAAIH,UAAWC,IAAOG,KAAtB,2DAGA,qBAAKJ,UAAWC,IAAOI,oBAAvB,SACE,wBAAQL,UAAWC,IAAOK,aAA1B,sBAEF,oBAAIN,UAAWC,IAAOG,KAAtB,2DAGA,uBACEG,KAAK,QACLT,KAAK,QACLU,YAAY,SACZT,MAAOP,EACPQ,UAAWC,IAAOQ,MAClBC,SAAUd,IAEZ,uBACEW,KAAK,WACLT,KAAK,WACLU,YAAY,WACZT,MAAOL,EACPM,UAAWC,IAAOQ,MAClBC,SAAUd,IAEZ,sBAAKI,UAAWC,IAAOU,cAAvB,UACE,wBAAQX,UAAWC,IAAOW,aAAcC,QA3CrB,SAAAC,GACvBA,EAAEC,iBACF1B,EAAS2B,IAAeC,MAAM,CAAEzB,QAAOE,cACvCD,EAAS,IACTE,EAAY,KAuCR,qBAGA,wBAAQK,UAAWC,IAAOiB,aAAcL,QAtClB,SAAAC,GAC1BA,EAAEC,iBACF1B,EAAS2B,IAAeG,SAAS,CAAE3B,QAAOE,cAC1CD,EAAS,IACTE,EAAY,KAkCR,2B,sBC5COyB,UAtBM,WACnB,OACE,0BAASpB,UAAWC,IAAOoB,QAA3B,UACE,sBAAKrB,UAAWC,IAAOqB,QAAvB,UACE,oBAAItB,UAAWC,IAAOsB,MAAtB,sBACA,oBAAGvB,UAAWC,IAAOG,KAArB,UACE,sBAAMJ,UAAWC,IAAOuB,SAAxB,eADF,qCAGE,uBAHF,+FAIiC,IAC/B,sBAAMxB,UAAWC,IAAOuB,SAAxB,yBALF,2DAM0C,IACxC,sBAAMxB,UAAWC,IAAOuB,SAAxB,qBAGJ,qBAAKxB,UAAWC,IAAOqB,QAAvB,SACE,cAAClC,EAAD","file":"static/js/9.39aaf8da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AuthForm_form__3IPjR\",\"text\":\"AuthForm_text__1m4NV\",\"buttonGoogleWrapper\":\"AuthForm_buttonGoogleWrapper__1fuNq\",\"buttonGoogle\":\"AuthForm_buttonGoogle__3gj54\",\"input\":\"AuthForm_input__1T3rt\",\"buttonWrapper\":\"AuthForm_buttonWrapper__M0ZhV\",\"buttonSignIn\":\"AuthForm_buttonSignIn__3c971\",\"buttonSignUp\":\"AuthForm_buttonSignUp__14R67\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"AuthPageView_section__1D6j2\",\"wrapper\":\"AuthPageView_wrapper__A3yf7\",\"title\":\"AuthPageView_title__1CFtR\",\"text\":\"AuthPageView_text__294vd\",\"textBold\":\"AuthPageView_textBold__3goVF\"};","// import React from 'react';\r\n// import { useFormik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authOperations from '../../redux/auth/auth-operations';\r\nimport styles from './AuthForm.module.scss';\r\n\r\nexport default function AuthForm() {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  // Sign In (Войти)\r\n  const handleClickLogIn = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.logIn({ email, password }));\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  // Sign Up (Регистрация)\r\n  const handleClickRegister = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.register({ email, password }));\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <form className={styles.form} autoComplete=\"off\">\r\n      <h2 className={styles.text}>\r\n        You can use your Google Account to authorize:\r\n      </h2>\r\n      <div className={styles.buttonGoogleWrapper}>\r\n        <button className={styles.buttonGoogle}>Google</button>\r\n      </div>\r\n      <h2 className={styles.text}>\r\n        Or login to our app using e-mail and password\r\n      </h2>\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        placeholder=\"E-mail\"\r\n        value={email}\r\n        className={styles.input}\r\n        onChange={handleChange}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        placeholder=\"Password\"\r\n        value={password}\r\n        className={styles.input}\r\n        onChange={handleChange}\r\n      />\r\n      <div className={styles.buttonWrapper}>\r\n        <button className={styles.buttonSignIn} onClick={handleClickLogIn}>\r\n          Sign in\r\n        </button>\r\n        <button className={styles.buttonSignUp} onClick={handleClickRegister}>\r\n          Sign up\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\n// ___________________________Formik_______________________________\r\n\r\n// const validate = values => {\r\n//   const errors = {};\r\n//   if (!values.email) {\r\n//     errors.email = 'Required';\r\n//   } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n//     errors.email = 'Invalid email address';\r\n//   }\r\n\r\n//   if (!values.password) {\r\n//     errors.password = 'Required';\r\n//   } else if (\r\n//     values.password.length < 8 ||\r\n//     !/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/\r\n//   ) {\r\n//     errors.password =\r\n//       'Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters';\r\n//   }\r\n\r\n//   return errors;\r\n// };\r\n\r\n// const AuthForm = () => {\r\n//   const dispatch = useDispatch();\r\n//   const formik = useFormik({\r\n//     initialValues: {\r\n//       email: '',\r\n//       password: '',\r\n//     },\r\n//     validate,\r\n//     handleChange: ({ target: { name, value } }) => {\r\n//       switch (name) {\r\n//         case 'email':\r\n//           return (formik.values.email = value);\r\n//         case 'password':\r\n//           return (formik.values.password = value);\r\n//         default:\r\n//           return;\r\n//       }\r\n//     },\r\n//     // Sign In (Войти)\r\n//     handleClickLogIn: event => {\r\n//       event.preventDefault();\r\n//       const { email, password } = event;\r\n//       console.log(event);\r\n//       console.log(email, password);\r\n//       dispatch(authOperations.logIn(email, password));\r\n//       formik.values.email = '';\r\n//       formik.values.password = '';\r\n//     },\r\n//     // Sign Up (Регистрация)\r\n//     handleClickRegister: event => {\r\n//       event.preventDefault();\r\n//       const { email, password } = event;\r\n//       dispatch(authOperations.register(email, password));\r\n//       formik.values.email = '';\r\n//       formik.values.password = '';\r\n//     },\r\n//   });\r\n//   return (\r\n//     <form className={styles.form} autoComplete=\"off\">\r\n//       <h2 className={styles.text}>\r\n//         You can use your Google Account to authorize:\r\n//       </h2>\r\n//       <div className={styles.buttonGoogleWrapper}>\r\n//         <button className={styles.buttonGoogle}>Google</button>\r\n//       </div>\r\n//       <h2 className={styles.text}>\r\n//         Or login to our app using e-mail and password\r\n//       </h2>\r\n//       <input\r\n//         type=\"email\"\r\n//         name=\"email\"\r\n//         placeholder=\"E-mail\"\r\n//         value={formik.values.email}\r\n//         className={styles.input}\r\n//         onChange={formik.handleChange}\r\n//       />\r\n//       <input\r\n//         type=\"password\"\r\n//         name=\"password\"\r\n//         placeholder=\"Password\"\r\n//         value={formik.values.password}\r\n//         className={styles.input}\r\n//         onChange={formik.handleChange}\r\n//       />\r\n//       <div className={styles.buttonWrapper}>\r\n//         <button\r\n//           className={styles.buttonSignIn}\r\n//           onClick={formik.handleClickLogIn}\r\n//         >\r\n//           Sign in\r\n//         </button>\r\n//         <button\r\n//           className={styles.buttonSignUp}\r\n//           onClick={formik.handleClickRegister}\r\n//         >\r\n//           Sign up\r\n//         </button>\r\n//       </div>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default AuthForm;\r\n","import AuthForm from '../../component/AuthForm/index';\r\n\r\nimport styles from './AuthPageView.module.scss';\r\n\r\nconst AuthPageView = () => {\r\n  return (\r\n    <section className={styles.section}>\r\n      <div className={styles.wrapper}>\r\n        <h2 className={styles.title}>Pro Test</h2>\r\n        <p className={styles.text}>\r\n          <span className={styles.textBold}>[</span> We will help you find weak\r\n          points\r\n          <br /> in knowledge so that you can strengthen it. We will show you\r\n          what is relevant to know for a{' '}\r\n          <span className={styles.textBold}>QA Engineer</span> and will try to\r\n          make the learning process more diverse_{' '}\r\n          <span className={styles.textBold}>]</span>\r\n        </p>\r\n      </div>\r\n      <div className={styles.wrapper}>\r\n        <AuthForm />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AuthPageView;\r\n"],"sourceRoot":""}